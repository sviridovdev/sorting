{"version":3,"sources":["MergeSort.ts","Button.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MergeSort","arr","_sort","length","aux","lo","hi","mid","Math","floor","_merge","k","i","j","Button","props","react_default","a","createElement","onClick","clickHandler","text","App","state","source","result","onInputChange","event","target","value","trim","split","_this","isArrayNumeric","map","item","Number","setState","onSortButtonClick","slice","sort","onGenerateButtonClick","arrayLength","random","push","isNaN","_this$state","this","className","placeholder","name","onChange","Button_Button","join","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4e74562.chunk.js","sourcesContent":["export default class MergeSort {\r\n    public static sort(arr: any[]): void {\r\n        let aux: any[] = [];\r\n        MergeSort._sort(arr, aux, 0, arr.length - 1);\r\n    }\r\n\r\n    private static _sort(arr: any[], aux: any[], lo: number, hi: number): void {\r\n        if (hi <= lo) return;\r\n        let mid: number = lo + Math.floor((hi - lo) / 2);\r\n        MergeSort._sort(arr, aux, lo, mid);\r\n        MergeSort._sort(arr, aux, mid + 1, hi);\r\n        MergeSort._merge(arr, aux, lo, mid, hi);\r\n    }\r\n\r\n    private static _merge(arr: any[], aux: any[], lo: number, mid: number, hi: number): void {\r\n        for (let k: number = lo; k <= hi; k++) {\r\n            aux[k] = arr[k];\r\n        }\r\n\r\n        let i: number = lo, j: number = mid + 1;\r\n        for (let k: number = lo; k <= hi; k++) {\r\n            if (i > mid) {\r\n                arr[k] = aux[j];\r\n                j++;\r\n            } else if (j > hi) {\r\n                arr[k] = aux[i];\r\n                i++;\r\n            } else if (aux[j] < aux[i]) {\r\n                arr[k] = aux[j];\r\n                j++;\r\n            } else {\r\n                arr[k] = aux[i];\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './Button.less'\r\n\r\n\r\nexport default function Button(props: any): any {\r\n    return (\r\n        <button onClick={props.clickHandler}>{props.text}</button>\r\n    );\r\n}","import React from 'react';\nimport './App.less';\nimport MergeSort from './MergeSort';\nimport Button from './Button';\n\nclass App extends React.Component {\n    state = {\n        source: [],\n        result: []\n    };\n\n    onInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        let source: any[] = event.target.value\n            ? event.target.value.trim().split(/\\s+/)\n            : [];\n\n        if (this.isArrayNumeric(source)) {\n            source = source.map(item => Number(item));\n        }\n\n        this.setState({source});\n    };\n\n    onSortButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\n        let result: any = this.state.source.slice(0);\n        MergeSort.sort(result);\n        this.setState({result})\n    };\n\n    onGenerateButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\n        let source: number[] = [];\n        // Длина массива выбирается случайно от 5 до 19\n        const arrayLength: number = Math.floor(Math.random() * 15) + 5;\n\n        for (let i: number = 0; i < arrayLength; i++) {\n            // Массив заполняется случайными числами от 1 до 100\n            source.push(Math.floor(Math.random() * 100) + 1);\n        }\n\n        this.setState({source});\n    };\n\n    isArrayNumeric(arr: any): boolean {\n        for (let i: number = 0; i < arr.length; i++) {\n            if (isNaN(Number(arr[i])))\n                return false;\n        }\n\n        return true;\n    }\n\n    render() {\n        const {source, result} = this.state;\n\n        return (\n            <div className=\"app\">\n                <div className=\"grid\">\n                    <div className=\"grid-row\">\n                        <div className=\"grid-col-main\">\n                            <textarea\n                                placeholder=\"Enter a sequence of numbers or words separated with spaces\"\n                                className=\"app-input\"\n                                name=\"app-input\"\n                                onChange={this.onInputChange}\n                            ></textarea>\n                        </div>\n                        <div className=\"grid-col-side\">\n                            <Button text=\"Generate randomly\" clickHandler={this.onGenerateButtonClick}/>\n                        </div>\n                    </div>\n                    <div className=\"grid-row\">\n                        <div className=\"grid-col-main\">\n                            <div>\n                                <p>Source: </p>\n                                {source.join(\" \")}\n                            </div>\n                            <div>\n                                <p>Result: </p>\n                                {result.join(\" \")}\n                            </div>\n                        </div>\n                        <div className=\"grid-col-side\">\n                            <Button text=\"Sort\" clickHandler={this.onSortButtonClick}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}