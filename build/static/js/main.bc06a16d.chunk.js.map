{"version":3,"sources":["MergeSort.ts","Button.tsx","InsertionSort.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MergeSort","arr","_sort","length","aux","lo","hi","mid","Math","floor","_merge","k","i","j","this","_less","arg1","arg2","toLowerCase","Button","props","react_default","a","createElement","onClick","clickHandler","text","InsertionSort","temp","App","CHOICE_MERGE_SORT","CHOICE_INSERTION_SORT","state","source","result","sortType","_this","onInputChange","event","target","value","trim","split","isArrayNumeric","map","item","Number","setState","onSortButtonClick","slice","sort","onRadioChange","checked","onGenerateButtonClick","arrayLength","random","push","isNaN","_this$state","className","placeholder","name","onChange","Button_Button","type","join","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc06a16d.chunk.js","sourcesContent":["export default class MergeSort {\r\n    /**\r\n     * Сортировка массива алгоритмом merge sort\r\n     * @param {any[]} arr - сортируемый массив\r\n     */\r\n    public static sort(arr: any[]): void {\r\n        let aux: any[] = [];\r\n        MergeSort._sort(arr, aux, 0, arr.length - 1);\r\n    }\r\n\r\n    /**\r\n     * Реализация сортировки merge sort\r\n     * @param {any[]} arr - сортируемый массив\r\n     * @param {any[]} aux - вспомогательный массив\r\n     * @param {number} lo - нижняя граница сортируемого участка\r\n     * @param {number} hi - верхняя граница сортируемого участка\r\n     * @private\r\n     */\r\n    private static _sort(arr: any[], aux: any[], lo: number, hi: number): void {\r\n        if (hi <= lo) return;\r\n        let mid: number = lo + Math.floor((hi - lo) / 2);\r\n        MergeSort._sort(arr, aux, lo, mid);\r\n        MergeSort._sort(arr, aux, mid + 1, hi);\r\n        MergeSort._merge(arr, aux, lo, mid, hi);\r\n    }\r\n\r\n    /**\r\n     * Объединяет два отсортированных подмассива\r\n     * @param {any[]} arr - сортируемый массив\r\n     * @param {any[]} aux - вспомогательный массив\r\n     * @param {number} lo - начало участка массива, который нужно объединить\r\n     * @param {number} mid - граница, разделяющая два подмассива, которые нужно объединить\r\n     * @param {number} hi - конец участка массива, который надо объединить\r\n     * @private\r\n     */\r\n    private static _merge(arr: any[], aux: any[], lo: number, mid: number, hi: number): void {\r\n        for (let k: number = lo; k <= hi; k++) {\r\n            aux[k] = arr[k];\r\n        }\r\n\r\n        let i: number = lo, j: number = mid + 1;\r\n        for (let k: number = lo; k <= hi; k++) {\r\n            if (this._less(mid, i)) {\r\n                arr[k] = aux[j];\r\n                j++;\r\n            } else if (this._less(hi, j)) {\r\n                arr[k] = aux[i];\r\n                i++;\r\n            } else if (this._less(aux[j], aux[i])) {\r\n                arr[k] = aux[j];\r\n                j++;\r\n            } else {\r\n                arr[k] = aux[i];\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Проверяет, меньше ли первый аргумент второго\r\n     * @param arg1\r\n     * @param arg2\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    private static _less(arg1: any, arg2: any) {\r\n        // Если аргументы являются строками, сравниваем, приводя к lower case\r\n        if (typeof arg1 == 'string' && typeof arg2 == 'string')\r\n            return arg1.toLowerCase() < arg2.toLowerCase();\r\n        else\r\n            return arg1 < arg2;\r\n    }\r\n}","import React from 'react';\r\nimport './Button.less'\r\n\r\n/**\r\n * Реализует компонент кнопки\r\n * @param props\r\n * @returns {any}\r\n * @constructor\r\n */\r\nexport default function Button(props: any): any {\r\n    return (\r\n        <button onClick={props.clickHandler}>{props.text}</button>\r\n    );\r\n}","export default class InsertionSort {\r\n    /**\r\n     * Сортировка массива алгоритмом insertion sort\r\n     * @param {any[]} arr - сортируемый массив\r\n     */\r\n    public static sort(arr: any[]): void {\r\n        for (let i: number = 0; i < arr.length; i++) {\r\n            for (let j: number = i; j > 0; j--) {\r\n                if (this._less(arr[j], arr[j - 1])) {\r\n                    let temp: any = arr[j];\r\n                    arr[j] = arr[j - 1];\r\n                    arr[j - 1] = temp;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Проверяет, меньше ли первый аргумент второго\r\n     * @param arg1\r\n     * @param arg2\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    private static _less(arg1: any, arg2: any) {\r\n        // Если аргументы являются строками, сравниваем, приводя к lower case\r\n        if (typeof arg1 == 'string' && typeof arg2 == 'string')\r\n            return arg1.toLowerCase() < arg2.toLowerCase();\r\n        else\r\n            return arg1 < arg2;\r\n    }\r\n}","import React from 'react';\nimport './App.less';\nimport MergeSort from './MergeSort';\nimport Button from './Button';\nimport InsertionSort from \"./InsertionSort\";\n\nclass App extends React.Component {\n    private readonly CHOICE_MERGE_SORT = 0;\n    private readonly CHOICE_INSERTION_SORT = 1;\n\n    state = {\n        source: [],\n        result: [],\n        sortType: this.CHOICE_MERGE_SORT\n    };\n\n    /**\n     * Обработчик ввода в поле ввода массива\n     * @param {React.ChangeEvent<HTMLTextAreaElement>} event\n     */\n    onInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        let source: any[] = event.target.value\n            ? event.target.value.trim().split(/\\s+/)\n            : [];\n\n        if (this.isArrayNumeric(source)) {\n            source = source.map(item => Number(item));\n        }\n\n        this.setState({source});\n    };\n\n    /**\n     * Обработчик клика по кнопке сортировки\n     * @param {React.MouseEvent<HTMLElement>} event\n     */\n    onSortButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\n        let result: any = this.state.source.slice(0);\n\n        switch (this.state.sortType) {\n            case this.CHOICE_MERGE_SORT:\n                MergeSort.sort(result);\n                break;\n            case this.CHOICE_INSERTION_SORT:\n                InsertionSort.sort(result);\n                break;\n            default:\n                MergeSort.sort(result);\n        }\n\n        this.setState({result})\n    };\n\n    /**\n     * Обработчик изменения состояния радиокнопок\n     * @param {React.ChangeEvent<HTMLInputElement>} event\n     */\n    onRadioChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target.checked)\n            this.setState({sortType: Number(event.target.value)});\n    };\n\n    /**\n     * Обработчик кнопки генерации случайного массива\n     * @param {React.MouseEvent<HTMLElement>} event\n     */\n    onGenerateButtonClick = (event: React.MouseEvent<HTMLElement>): void => {\n        let source: number[] = [];\n        // Длина массива выбирается случайно от 5 до 19\n        const arrayLength: number = Math.floor(Math.random() * 15) + 5;\n\n        for (let i: number = 0; i < arrayLength; i++) {\n            // Массив заполняется случайными числами от 1 до 100\n            source.push(Math.floor(Math.random() * 100) + 1);\n        }\n\n        this.setState({source});\n    };\n\n    /**\n     * Проверяет, является ли массив числовым\n     * @param arr - проверяемый массив\n     * @returns {boolean}\n     */\n    isArrayNumeric(arr: any): boolean {\n        for (let i: number = 0; i < arr.length; i++) {\n            if (isNaN(Number(arr[i])))\n                return false;\n        }\n\n        return true;\n    }\n\n    render() {\n        const {source, result} = this.state;\n\n        return (\n            <div className=\"app\">\n                <div className=\"grid\">\n                    <div className=\"grid-row grid-row-1\">\n                        <div className=\"grid-col-main\">\n                            <textarea\n                                placeholder=\"Enter a sequence of numbers or words separated with spaces\"\n                                className=\"app-input\"\n                                name=\"app-input\"\n                                onChange={this.onInputChange}\n                            ></textarea>\n                        </div>\n                        <div className=\"grid-col-side\">\n                            <Button text=\"Generate randomly\" clickHandler={this.onGenerateButtonClick}/>\n                        </div>\n                    </div>\n                    <div className=\"grid-row grid-row-2\">\n                        <div className=\"grid-col-side\">\n                            <Button text=\"Sort\" clickHandler={this.onSortButtonClick}/>\n\n                            <div className=\"search-type-selection\">\n                                <label>\n                                    <input type=\"radio\" name=\"sortalg\" value={this.CHOICE_MERGE_SORT}\n                                           onChange={this.onRadioChange}\n                                           checked={this.state.sortType == this.CHOICE_MERGE_SORT}/>\n                                    Merge sort\n                                </label>\n\n                                <label>\n                                    <input type=\"radio\" name=\"sortalg\" value={this.CHOICE_INSERTION_SORT}\n                                           onChange={this.onRadioChange}\n                                           checked={this.state.sortType == this.CHOICE_INSERTION_SORT}/>\n                                    Insertion sort\n                                </label>\n                            </div>\n                        </div>\n                        <div className=\"grid-col-main\">\n                            <div>\n                                <p>Source: </p>\n                                {source.join(\" \")}\n                            </div>\n                            <div>\n                                <p>Result: </p>\n                                {result.join(\" \")}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}